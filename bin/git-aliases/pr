#!/bin/bash

usage ()
{
  echo "Usage: git pr <command> [<branch>]"
}

showhelp()
{
  echo "
  If no github pull request exists for this branch a draft github pull request
  will be created and then opened in the browser.  Otherwise, just open the
  github pull request in the browser.

  CREATING:
  For github pull request creation, the branch is assumed to follow the format
  of <username>/<JIRA-ISSUE>/<semantic-name>

  username      - is ignored

  JIRA-ISSUE    - is added to the title, and a link is created in a body to the
                  jira issue. 
                  
                  The title will be set in the following format:
                    [JIRA-ISSUE] <title>

                  The link will be placed in the body in the following format: 
                    [JIRA-ISSUE](https://jira.corp.adobe.com/browse/JIRA-ISSUE

  semantic-name - Will be converted from kebab-case to Title Case and used in
                  the title of the github pull request.

  CLI Dependencies: git, gh, node, jira-cli
  "
  echo " "
  usage
  echo " "
  echo "Commands:"
  echo "all                 Overview of all PRs for the repo related to me"
  echo "checks              Displays pr automated checks status"
  echo "done                Checks to see that PR is merged, deletes local branch, marks ticket Done"
  echo "draft               Moves PR back to draft state and transitions Jira issue status to In Development"
  echo "help                Show brief help"
  echo "merge               Adds the merge-queue label to the pr, and transitions Jira issue status to Ready To Merge"
  echo "others              Show PRs I have reviewed that are not yet merged"
  echo "ready               Moves PR from draft to ready state and transitions Jira issue status to In Review"
}

command="$1"
branch_maybe="$2"

reviewed_by_me_prs () 
{
  bold=$(tput bold)
  echo ""
  echo "${bold}Reviewed but not yet merged${bold}"
  gh pr list -S "reviewed-by:@me"
}

urlencode () {
  string=$1
  while [ -n "$string" ]; do
    tail=${string#?}
    head=${string%$tail}
    case $head in
      [-._~0-9A-Za-z]) printf %c "$head";;
      *) printf %%%02x "'$head"
    esac
    string=$tail
  done
  echo
}

branch=$(git branch --show-current)
pr_number=$(gh pr view --json number --jq '.number' 2>&1)
issue=$(echo $branch | cut -d"/" -f2)
if [[ "$issue" != "NO-JIRA" ]]; then
  issue_link="[$issue](https://jira.corp.adobe.com/browse/$issue)
  
  "
fi


pr_done() {
   if [[ $(gh pr view "$pr_number" --json state --jq '.state' ) == "MERGED" ]]; then
     git checkout main
     echo "Deleting branch $branch"
     git branch -D $branch

      if [[ "$issue" != "NO-JIRA" ]]; then
       echo "Moving Jira $issue to Done"
        # Move ticket to Done
        jira issue move "$issue" "Done" 
      else
        echo "No Jira issue to update"
      fi
    else
      echo "Unable to close PR, it is not merged"
      exit 1
   fi
}

pr_template() {
  while IFS= read -r line; do
    if [[ $line != \\* && $line != ---* ]]; then
      line=$(printf '%s\n' "$line")
      if [[ 
        $line =~ "Jira issue prefixed" || 
        $line =~ "Useful title" ||
        $line =~ "Team: ..." ||
        $line =~ "Add labels to deploy PR envs" ||
        $line =~ "Only added the" ||
        $line =~ "I wrote unit tests for all new/modified functionality" ||
        $line =~ "My code conforms to the coding conventions" ||
        $line =~ "Opt-Out. I am not changing any code which involves Internationalization"
      ]]; then
        # check the box
        echo $line | sed -E 's/-(.*)\[ \]/-\1[x]/g'
      else
        echo $line
      fi
    fi
  done < $(git rev-parse --show-toplevel)/.github/PULL_REQUEST_TEMPLATE.md
}

case $command in
  help)
      showhelp
      exit
      ;;
    ready)
      gh pr ready
      echo "PR $pr_number is ready for review!"

      if [[ -z $issue_link ]]; then
        echo " - No jira issue to link"
        echo "Done!"
        exit

      fi

      echo " - Adding Pull Request link to Jira issue $issue";
      # Add links back to the PR in the issue
      jira issue link remote "$issue" $(gh pr view --json url --jq '.url') "Pull Request"
      echo " - Adding PR Environment link to Jira issue $issue";

      jira issue link remote "$issue" "https://$pr_number.prenv.projectx.corp.adobe.com" "PR Environment"

      echo " - Moving Jira issue $issue to In Review";

      # Move ticket to In Review
      jira issue move "$issue" "In Review" 

      echo "Done!"

      exit
      ;;
    done)
      pr_done
      exit
      ;;
    draft)
      gh pr ready --undo
      echo "PR $pr_number moved back to draft."
      if [[ -z $issue_link ]]; then
        echo " - No jira issue change status for"
        echo "Done!"
        exit

      fi
      echo " - Moving Jira issue $issue back to In Development";
      # Move ticket to In Development
      jira issue move "$issue" "In Development" 
      echo "Done!"
      exit
      ;;
    checks)
      echo "Getting PR check status for $pr_number"
      gh pr checks "$pr_number"
      exit
      ;;
    merge)
      gh pr edit --add-label "merge-queue"
      echo "Added merge-queue label to pr #$pr_number"
      if [[ -z $issue_link ]]; then
        echo " - No jira issue change status for"
        echo "Done!"
        exit

      fi
      # Move ticket to Ready to Merge
      echo " - Moving Jira issue $issue to Ready to Merge";
      jira issue move "$issue" "Ready to Merge" 
      exit
      ;;
    all)
      gh pr status
      reviewed_by_me_prs
      exit
      ;;
    others)
      reviewed_by_me_prs
      exit
      ;;
    build)
      open "https://app.circle.ci.adobe.com/pipelines/github/Horizon/hz?branch=$(urlencode $branch)"
      exit
      ;;
    *)
      if ! [ -z $command ]; then
        showhelp
        exit 1
      fi
      ;;
esac


if [[ $pr_number =~ ^no.*$ ]]; then
  to_branch="main" && [[ $# > 1 ]] && to_branch=$branch_maybe

  if [[ $to_branch == $branch ]]; then
    echo "Can't PR from $branch to $to_branch because they are the same"
    exit 1
  fi
  semantic_name=$(echo $branch | cut -d"/" -f3)
  # Convert to title case
  semantic_name=$(node -e "console.log(\"$semantic_name\".split('-').map((word) => word.replace(/^[a-z]/, (lower) => lower.toUpperCase())).join(' '))")
  title="[$issue] $semantic_name"

  common_commit=$(git merge-base origin/$to_branch $branch)

  body="$issue_link
  $(git log HEAD...$common_commit --pretty=format:' - %s%n%n%b')

  $(pr_template)
  
  "

  read -p "Create Pull Request?
  
  $title
  __________________________________________
  
  $body

 [Y/n]?
  " -n 1 -r

  # exit early if it's a no
  if ! [[ $REPLY =~ ^[Yy]$ || -z $REPLY ]]; then
    echo    
    echo "It's cool, we all make mistakes..."
    echo    
    exit 
  fi


  # actually create the PR
  echo "Creating Pull Request to $to_branch, with title $title"
  gh pr create -B $to_branch -t "$title" -b "$body" -l "Team: CCX Content" -l "x-prenv" -d 


fi

gh pr view -w
